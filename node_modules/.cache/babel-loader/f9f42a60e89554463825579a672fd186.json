{"ast":null,"code":"var _jsxFileName = \"/Users/amirarif/Documents/javascript/reactjs/udemy/react_effects_reducers/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport Input from '../UI/Input/Input';\nimport AuthContext from '../../store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  // using this reducer we cab group the multiple states of email here\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    }; // check valid/val\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    }; // check valid/val\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // because we are using useReducer then remove these separate states \n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); // for managing the complex state use the useReducer\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext); // extracting the state from the objects \n\n  const {\n    isValid: emailValid\n  } = emailState;\n  const {\n    isValid: passwordValid\n  } = passwordState;\n  useEffect(() => {\n    const timeoutIdentifier = setTimeout(() => {\n      console.log('Checking form validity...');\n      setFormIsValid(emailValid && passwordValid);\n    }, 500); // cleanup function \n\n    return () => {\n      console.log('CLEANUP...'); // clear the timeout using default browser function\n\n      clearTimeout(timeoutIdentifier);\n    };\n  }, [emailValid, passwordValid]);\n\n  const emailChangeHandler = event => {\n    // setEnteredEmail(event.target.value);\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    // setEnteredPassword(event.target.value);\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n    } else if (!emailValid) {} else {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-Mail\",\n        type: \"email\",\n        isValid: emailValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"PwQnPs3BIZrK3n7D6ybnYlEv5Jg=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/amirarif/Documents/javascript/reactjs/udemy/react_effects_reducers/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Card","classes","Button","Input","AuthContext","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","emailValid","passwordValid","timeoutIdentifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { \n  useState, \n  useEffect, \n  useReducer, \n  useContext, \n  useRef } \n  from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport Input from '../UI/Input/Input';\n\nimport AuthContext from '../../store/auth-context';\n\n\nconst emailReducer = (state, action) => {\n\n  // using this reducer we cab group the multiple states of email here\n\n  if (action.type === 'USER_INPUT'){\n    return {value: action.val, isValid: action.val.includes('@')}; // check valid/val\n  }\n\n\n  if (action.type === 'INPUT_BLUR'){\n    return {value: state.value, isValid: state.value.includes('@')};\n  }\n\n  return {value: '', isValid: false};\n};\n\nconst passwordReducer = (state, action) => {\n\n  if (action.type === 'USER_INPUT'){\n    return {value: action.val, isValid: action.val.trim().length > 6}; // check valid/val\n  }\n\n\n  if (action.type === 'INPUT_BLUR'){\n    return {value: state.value, isValid: state.value.trim().length > 6};\n  }\n\n  return {value: '', isValid: false};\n\n};\n\n\nconst Login = (props) => {\n  // because we are using useReducer then remove these separate states \n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  // for managing the complex state use the useReducer\n  const [emailState, dispatchEmail] = useReducer(\n    emailReducer, \n    {value: '', \n    isValid: null\n    }\n    );\n\n  const [passwordState, dispatchPassword] = useReducer(\n    passwordReducer, \n    {value: '', \n    isValid: null\n    }\n    );\n\n  const authCtx = useContext(AuthContext);\n  \n  // extracting the state from the objects \n  const {isValid: emailValid} = emailState; \n  const {isValid: passwordValid} = passwordState;\n\n\n  useEffect( () => {\n\n    const timeoutIdentifier = setTimeout( () => {\n\n      console.log('Checking form validity...');\n\n      setFormIsValid(\n        emailValid && passwordValid\n      );\n\n    }, 500);\n\n    // cleanup function \n    return () => {\n      console.log('CLEANUP...');\n      // clear the timeout using default browser function\n      clearTimeout(timeoutIdentifier);\n    };\n    \n  }, [emailValid, passwordValid]);\n\n\n  const emailChangeHandler = (event) => {\n    // setEnteredEmail(event.target.value);\n\n    dispatchEmail({\n      type: 'USER_INPUT', \n      val: event.target.value\n    });\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    // setEnteredPassword(event.target.value);\n\n    dispatchPassword({\n      type: 'USER_INPUT', \n      val: event.target.value\n    });\n\n    setFormIsValid(\n      emailState.isValid && event.target.value.trim().length > 6\n    );\n  };\n\n  const validateEmailHandler = () => {\n    // setEmailIsValid(emailState.isValid);\n\n    dispatchEmail({type: 'INPUT_BLUR'});\n\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n\n    dispatchPassword({type: 'INPUT_BLUR'});\n\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (formIsValid){\n\n      authCtx.onLogin(emailState.value, passwordState.value);\n\n    }else if (!emailValid){\n\n    }else{\n\n    }\n\n    \n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        \n        <Input \n        id=\"email\" \n        label=\"E-Mail\" \n        type=\"email\" \n        isValid={emailValid} \n        value={emailState.value} \n        onChange={emailChangeHandler} \n        onBlur={validateEmailHandler} \n        />\n        <Input \n        id=\"password\" \n        label=\"Password\" \n        type=\"password\" \n        isValid={passwordValid} \n        value={passwordState.value} \n        onChange={passwordChangeHandler} \n        onBlur={validatePasswordHandler} \n        />\n        \n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}