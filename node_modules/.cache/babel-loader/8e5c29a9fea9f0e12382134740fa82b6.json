{"ast":null,"code":"var _jsxFileName = \"/Users/amirarif/Documents/javascript/reactjs/udemy/react_effects_reducers/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    document.title = \"Chat Room Application | React Hooks\";\n  }, []); // useEffect( () => {\n  //   const isLoggedInData = localStorage.getItem('isLoggedIn');\n  //   if (isLoggedInData === '1'){\n  //     setIsLoggedIn(true);\n  //   }\n  // },);\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem('isLoggedIn', '1');\n  //   setIsLoggedIn(true);\n  // };\n  // const logoutHandler = () => {\n  //   localStorage.removeItem('isLoggedIn');\n  //   setIsLoggedIn(false);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/amirarif/Documents/javascript/reactjs/udemy/react_effects_reducers/src/App.js"],"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","document","title","onLogout","logoutHandler","loginHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACC,KAAT,GAAiB,qCAAjB;AACF,GAFS,EAEP,EAFO,CAAT,CAHa,CAOb;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBAEE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAC3B;AACEH,MAAAA,UAAU,EAAEA,UADd;AAEEI,MAAAA,QAAQ,EAAEC;AAFZ,KADA;AAAA,4BAMA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YANA,eAOA;AAAA,iBACG,CAACL,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEM;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGN,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAPA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAeD;;GA7CQN,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\n\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    document.title = \"Chat Room Application | React Hooks\"\n }, []);\n\n  // useEffect( () => {\n  //   const isLoggedInData = localStorage.getItem('isLoggedIn');\n\n  //   if (isLoggedInData === '1'){\n  //     setIsLoggedIn(true);\n  //   }\n\n  // },);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n\n  //   localStorage.setItem('isLoggedIn', '1');\n\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem('isLoggedIn');\n  //   setIsLoggedIn(false);\n  // };\n\n  return (\n  \n    <AuthContext.Provider value={\n    {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    }\n    }>\n    <MainHeader />\n    <main>\n      {!isLoggedIn && <Login onLogin={loginHandler} />}\n      {isLoggedIn && <Home onLogout={logoutHandler} />}\n    </main>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}